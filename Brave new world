using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace first_project
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;

            int heroPosX = 1;
            int heroPosY = 1;
            char[,] map = ReadMap("Map1", ref heroPosX, ref heroPosY);
            int count = 1;
            DrawMap(map);

            while (count > 0)
            {
                Console.SetCursorPosition(heroPosY, heroPosX);
                MoveHero(map, ref heroPosX, ref heroPosY);
                count = CountCoin(map);
            }

            Console.WriteLine("Поздравляю, вы прошли первый уровень");
        }

        static int CountCoin(char[,] map)
        {
            int count = 0;

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    if (map[i, j] == '.')
                    {
                        count += 1;
                    }
                }
            }

            Console.SetCursorPosition(0, map.GetLength(0));
            Console.WriteLine("                                 ");
            Console.SetCursorPosition(0, map.GetLength(0));
            Console.WriteLine($"Осталось собрать монет: {count}");
            return count;
        }

        static void ChooseDirection(ref int subjectDX, ref int subjectDY)
        {
            ConsoleKeyInfo key = Console.ReadKey();

            switch (key.Key)
            {
                case ConsoleKey.UpArrow:
                    subjectDX = -1;
                    break;
                case ConsoleKey.DownArrow:
                    subjectDX = 1;
                    break;
                case ConsoleKey.RightArrow:
                    subjectDY = 1;
                    break;
                case ConsoleKey.LeftArrow:
                    subjectDY = -1;
                    break;
            }
        }

        static void MoveHero(char[,] map, ref int subjectX, ref int subjectY)
        {
            if (Console.KeyAvailable)
            {
                int subjectDX = 0;
                int subjectDY = 0;

                ChooseDirection(ref subjectDX, ref subjectDY);

                if (map[subjectX + subjectDX, subjectY + subjectDY] != '+')
                {
                    Console.Write(' ');
                    subjectX += subjectDX;
                    subjectY += subjectDY;
                    map[subjectX, subjectY] = ' ';
                    Console.SetCursorPosition(subjectY, subjectX);
                    Console.Write('@');
                }
            }
        }

        static void DrawMap(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    if (map[i, j] == ' ')
                    {
                        map[i, j] = '.';
                    }

                    Console.Write(map[i, j]);
                }

                Console.WriteLine();
            }
        }

        static char[,] ReadMap(string mapName, ref int heroPosX, ref int heroPosY)
        {
            string[] newFile = File.ReadAllLines($"Maps/{mapName}.txt");
            char[,] map = new char[newFile.Length, newFile[0].Length];

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    map[i, j] = newFile[i][j];
                    if (map[i, j] == '@')
                    {
                        heroPosX = i;
                        heroPosY = j;
                    }
                }
            }

            return map;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace first_project
{
    class Program
    {
        static void Main(string[] args)
        {
            int playerAmount;
            int cardAmount;
            int deckAmount = ((int)Suit.Spades + 1) * ((int)Value.Ace + 1);
            List<Player> players = new List<Player>();

            Console.WriteLine("Добро пожаловать в карточную раздачу");
            Console.WriteLine("Напишите сколько участников будет в игре?");
            playerAmount = ReadNumber();

            for (int i = 0; i < playerAmount; i++)
            {
                Console.WriteLine($"Игрок {i + 1}");
                Player player = new Player();
                players.Add(player);
            }

            Console.WriteLine("Напишите сколько карт необходимо раздать?");
            cardAmount = ReadNumber();

            while (IsEnoughCard(playerAmount, cardAmount, deckAmount))
            {
                cardAmount = ReadNumber();
            }

            Dealer dealer = new Dealer(playerAmount, cardAmount, players);
            
            dealer.StartGame();
            dealer.ShowInfo();
        }

        static bool IsEnoughCard(int feature1, int feature2, int maxtotal)
        {
            bool isMore = true;

            if (feature1*feature2 <= maxtotal)
            {
                isMore = false;
            }
            else
            {
                Console.WriteLine("Не хватает карт, введите другое число");
            }

            return isMore;
        }
            
        static int ReadNumber()
        {
            string text;
            int number = 0;
            bool isNumber = true;

            while (isNumber)
            {
                text = Console.ReadLine();

                if (int.TryParse(text, out number))
                {
                    isNumber = false;
                }
                else
                {
                    Console.WriteLine("Было введено не число, попробуйте снова");
                }
            }

            return number;
        }
    }

    enum Suit
    {
        Hearts,
        Diamonds,
        Clubs,
        Spades
    }

    enum Value
    {
        Two,
        Three,
        Four,
        Five,
        Six,
        Seven,
        Eight,
        Nine,
        Ten,
        Jack,
        Queen,
        King,
        Ace
    }

    class Dealer
    {
        private int _playerAmount;
        private int _cardAmount;
        private List<Player> _players;
        private List<string> _cards = new List<String>();

        public Dealer(int playerAmount, int cardAmount, List<Player> players)
        {
            _playerAmount = playerAmount;
            _cardAmount = cardAmount;
            _players = players;

            FindAllCards();
        }

        private void FindAllCards()
        {
            int lastSuit = 3;
            int lastValue = 12;
            string card;

            for (int i = 0; i < lastSuit + 1; i++)
            {
                for (int j = 0; j < lastValue + 1; j++)
                {
                    card = $"{(Suit)i} {(Value)j}";
                    _cards.Add(card);
                }
            }
        }

        public void StartGame()
        {
            for (int i = 0; i < _cardAmount; i++)
            {
                for (int j = 0; j < _playerAmount; j++)
                {
                    Console.WriteLine($"Ход {_players[j].Name}");
                    Card card = GiveCard();
                    _players[j].AddCardToPlayer(card);
                    Console.ReadKey();
                }
            }
        }

        public void ShowInfo()
        {
            Console.Clear();

            foreach (Player player in _players)
            {
                player.ShowInfo();
                Console.ReadKey();
            }
        }

        private Card GiveCard()
        {
            string cardText = "";
            Card card = new Card();
            Random random = new Random();
            bool isContain = true;

            while (isContain)
            {
                cardText = $"{card.Suit} {card.Value}";
                if (_cards.IndexOf(cardText) == -1 )
                {
                    card = new Card();
                }
                else
                {
                    isContain = false;
                }
            }

            _cards.RemoveAt(_cards.IndexOf(cardText));
            Console.WriteLine($"Игроку выпала -  {card.Value} {card.Suit}");

            return card;
        }
    }

    class Card
    { 
        private Random _random = new Random();
        public Suit Suit { get; private set;}
        public Value Value { get; private set;}
        
        public Card()
        {
            GiveCard();
        }

        private void GiveCard()
        {
            int firstSuit = 0;
            int lastSuit = 3;
            int firstValue = 0;
            int lastValue = 12;

            Suit = (Suit)_random.Next(firstSuit, lastSuit + 1);
            Value = (Value)_random.Next(firstValue, lastValue + 1);
        }

        public void ShowInfo()
        {
            Console.WriteLine(Value + " " + Suit);
        }
    }

    class Deck
    {
        private List<Card> _cards = new List<Card>();

        public void AddCard(Card card)
        {
            _cards.Add(card);
        }

        public void ShowInfo()
        {
            foreach (Card card in _cards)
            {
                card.ShowInfo();
            }
        }
    }

    class Player
    {
        private Deck _deck = new Deck();
        public string Name { get; private set; }

        public Player()
        {
            Console.WriteLine("Введите Имя игрока");
            Name = Console.ReadLine();
        }

        public void AddCardToPlayer(Card card)
        {
            _deck.AddCard(card);
        }

        public void ShowInfo()
        {
            Console.WriteLine(Name + " получил следующие карты");
            _deck.ShowInfo();
        }
    }
}
